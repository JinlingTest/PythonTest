函数编程

decorators：使用一个函数修改另一个函数
def pbanner(arg):
    print('================')
    arg()
    print('================')

def fun01():
    print('AAAAAAAAAA')
    print('BBBBBBBBBBBB')
    print('CCCCCCCCCCC')

def fun02():
    print('XXAAAAAAAAAA')
    print('YYBBBBBBBBBBBB')
    print('ZZCCCCCCCCCCC')


pbanner(fun02)

def pbanner(arg):
    print('================')
    arg()
    print('================')




@pbanner

def fun022222222222():
    print('AAAAAAAAAA')
    print('BBBBBBBBBBBB')
    print('CCCCCCCCCCC')   

def pbanner(arg):
    def wrap():
        print('================')
        arg()
        print('================')
    return wrap()

递归 recursion
（函数调用自身）
阶乘
5！  5*4*3*2*1
4！	   4*3*2*1
3！		 3*2*1
2！		   2*1
1！		     1

5！=5*4！
		4！=4*3！
				3！=3*2！
						2！=2*1！
								1！=1
								
	def factorial(x):
    if x==1:
      return 1
    else:
       return x*factorial(x-1)

print(factorial(6))

"""
阶乘
5！  5*4*3*2*1
4！	   4*3*2*1
3！		 3*2*1
2！		   2*1
1！		     1

5！=5*4！
		4！=4*3！
				3！=3*2！
						2！=2*1！
								1！=1
"""

写法错误de
def factorial(x):
      return x*factorial(x-1)

print(factorial(6))

RecursionError: maximum recursion depth exceeded
								
斐波那契数列
1,1,2,3,5,8,13,21								

def fib(arg):
    if arg==1 or arg==2:
        return 1
    else:
        return fib(arg-2)+fib(arg-1)

print(fib(6))



"""
斐波那契数列
1,1,2,3,5,8,13,21
1--1
2--1
3--2
4--3
......
8--21
"""



								

def is_even(x):
    if x==0:
      return True
    else:
        return is_odd(x-1)

def is_odd(x):
    return not is_even(x)


print(is_even(10))
print(is_even(11))
print(is_odd(20))
print(is_odd(21))

"""
！！！if x==0 是递归的底线
"""

====

list [1,2,3,'A','B']
dictionaries {'name':'alice','sex':'F'}
tuple (1,2,3,4)

set  无序 没有索引下标 无法通过顺序提值 set速度快于list  
  去重
{1,2,3,'A','B'}
set([1,2,3,'A','B'])
add
remove() 删除指定
pop()删除任意一个
len()
set3={1,2,3,'a','b','c'}
#set3.remove(3)
#print(set3)
#set3.remove('b')
#print(set3)
set3.pop()
print(set3)
set3.pop()
print(set3)
print(len(set3))

set集合计算
| 联合
& 交集
-
^
set1={1,2,3,4,5}
set2={4,5,6,7,8}
set3=set1|set2
set4=set1&set2
set5=set1-set2
set6=set2-set1
set7=set1^set2
print(set7)

Data Structure的总结

列表 lists
字典 dictionaries
元组 tuples
集合 set

可变lists/dictionaries/set
不可变 tuples

有序lists/dictionaries/tuples
无序 set

唯一性 set

符号 lists[] dictionaries{key:values,key:values}
	 tuples()  set{}
零元素

模块itertools 迭代器 ----高效率循环
三个函数 
count/cycle/repeat
count(begin_num)
cycle([1,2,3])
repeat(100)
from itertools import count,cycle,repeat
for i in repeat(20):
    print(i)


"""
for i in cycle([1,2,100]):
    print(i)
"""

"""
for i in count(10):
    print(i)
    if i==20:
      break
"""

	 

1	20	3	5	5	16	7	28 
1	21	24	29	34	50	57	85

1 3 5 7 9....
1 4 9 16 25


















