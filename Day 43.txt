v1='Hello World'
print(v1.replace('World','Python'))
print(v1)

#join使用一个字符串 作为分隔符 来连接一个字符列表
v1=['hello','world','python','java']
v2=','
v3=v2.join(v1)
print(v3)
JOIN 将字符列表转换为字符串
print(','.join(['a','b','c']))
print('\t'.join(['a','b','c']))
print('$$$$$'.join(['a','b','c']))
print(''.join(['a','b','c']))
SPLIT将可分割字符串转换为列表
print('a,b,c'.split(','))
print('a$$$$$b$$$$$c'.split('$$$$$'))




数字函数
max min abs sum round
#针对单个数字 或 数字列表
print(max([1,2,3,7,6,5,100]))
print(min([1,2,3,-10,7,6,5,100]))
print(sum([1,2,3,4,5]))
print(abs(-10))


print(min([sum([11,22]),max([abs(-30),20])]))

print(round(123.456,2))
print(round(123.456,0))
print(round(123.456))
print(round(123.456,-1))
print(round(123.456,-2))
print(round(123.456,-3))
print(round(523.456,-3))


v1=[70,71,80,53,90,65]
v1=[10,11,10,13,10,25]
v2=[10,21,'30',43,50,'65']
v3=['fail','pass','good','excellent']
"""
if all(i>=60   for i in v1):
    print('全部都及格')
else:
    print('有不及格学生')

if any(i>=60   for i in v2):
    print('有及格的')
else:
    print('居然都不及格 ')
"""
"""
print(v3[2])
['fail','pass','good','excellent']
0,fail
1,pass
2,good
3,excellent
"""
for i in enumerate(v3):
    print(i)

for i in enumerate(v3,3):
    print(i)

for i in enumerate(v3,1):
    print(i)


函数编程
高阶函数 函数基于函数 （函数的参数是函数）

#Function Programming
#基于函数的函数 高阶函数将一个函数作为另一个函数的参数 或将其作为结果返回

def fun1(fun,arg):
    return fun(arg)

def fun2(fun,arg):
    return fun(fun(arg))


def fun3(arg1):
    return arg1**2

#print(fun3(10))

print(fun1(fun3,11))

print(fun2(fun3,11))
v01=11
v02=fun3
print(fun2(v02,v01))

def apply_twice(funx,arg):
    return funx(funx(arg))

def add_ten(arg):
    return arg+10

print(apply_twice(add_ten,10))


#pure Function  返回值依赖于参数 相同的参数 执行任意遍 返回值相同
def fun1(arg):
    return arg*2

def fun2(arg1,arg2):
    return (arg1*2+arg2-10)/(arg1+3)*(arg2-2)

print(fun1(10))
print(fun1(10))
print(fun1(10))
print(fun1(10))

print(fun2(20,30))
print(fun2(20,30))
print(fun2(20,30))
print(fun2(20,30))

非纯函数 append
v1=[1,2,'A']
v1.append('Hi')
print(v1)
v1.append('Hi')
print(v1)
v1.append('Hi')
print(v1)
v1.append('Hi')
print(v1)


lambda----匿名函数

使用def定义的函数 在def后面会添加函数名
def add5(arg):
	return arg+5

匿名函数
lambda
"""
def add5(arg):
	return arg+5

print(add5(2))
"""
print((lambda arg:  arg+5 )(2))

#拉姆达表达式
fun1=lambda arg: arg+5

print(fun1(2))


triple=lambda x: x*3
add=lambda x,y: x+y
print(add(triple(10),5))


内置的高阶函数
map 针对列表[1,2,3,'A','a']进行迭代操作

v1=[5000,6000,5500,8000,12000,20000,5200]
"""
def fun20(arg):
    return arg*1.2

print(list(map(fun20,v1)))
"""
print(list(map(lambda x: x*1.2,v1)))


#filter 针对列表进行迭代的高阶函数 当函数(用于判断的函数 T  F)
v1=[5000,6000,5500,8000,12000,20000,5200]

def fun1(arg):
    return arg>=8000

print(list(filter(fun1,v1)))

print(list(filter(lambda arg: arg>=8000,v1)))

v1=[1,2,3,4,5,6]
v2=[4,5,6,7,8,9,10]
v3=[1,3,5,7,9]
v4=[1,3,5,9]
#generator
def fun1():
    i=1
    while i<=6:
        yield i
        i+=1
print(list(fun1()))

def fun2():
    i=4
    while i<=10:
        yield i
        i+=1
print(list(fun2()))

def fun3():
    i=1
    while i<=9:
        if i%2==1:
            yield i
        i+=1
print(list(fun3()))

def fun4():
    i=1
    while i<=9:
        if i%2==1:
            if i!=7:
              yield i
        i+=1
print(list(fun4()))







"""
def fun2():
    return 10

print(fun2())
"""

v1=[1,2,3,4,5,6]
v2=[3,4,5,6,7,8,9,10]

def fun1(m,n):
    i=m
    while i<=n:
        yield i
        i+=1
print(list(fun1(3,10)))


def fun1(m,n):
    for i in range(m,n+1):
        yield i

print(list(fun1(7,15)))        
    
v1=['a','b','c']
v2='abc'
"""
print(v1[1])
print(v2[1])
"""
def fun1():
   v1='哈哈哈哈哈哈'
   x=''
   for i in v1:
       x+=i
       yield x 
print(list(fun1()))




1: git status                           │
2: git add --all                        │
4: git commit -m "190821"               │
5: git push -u origin master


